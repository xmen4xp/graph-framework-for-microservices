---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dmi-kubeconfig
  namespace: {{ default  .Release.Namespace .Values.global.namespace }}
data:
  kubeconfig: |
    current-context: {{ .Values.global.k8sProxyServiceName }}
    apiVersion: v1
    kind: Config
    clusters:
    - cluster:
        api-version: v1
        server: http://{{ .Values.global.k8sProxyServiceName }}
        insecure-skip-tls-verify: true
      name: {{ .Values.global.k8sProxyServiceName }}
    contexts:
    - context:
        cluster: {{ .Values.global.k8sProxyServiceName }}
      name: {{ .Values.global.k8sProxyServiceName }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dmi-script
  namespace: {{ default  .Release.Namespace .Values.global.namespace }}
data:
  create_datamodel_cm.sh: |
      set -ex
      NAME=${NAME:-}
      DATAMODEL_IMAGE=${IMAGE}
      IMAGE="file://${NAME}"
      TITLE=${TITLE:-}
      SKIP_CRD_INSTALLATION=${SKIP_CRD_INSTALLATION:-false}
      GRAPHQL_ENABLED=${GRAPHQL_ENABLED:-false}
      ### User can pass the custom HTTP URL where the graphql plugin can be downloaded via internet
      GRAPHQL_PATH=${GRAPHQL_PATH:-NA}
      ### This is to support older way of installing datamodel from local folder
      echo '
      apiVersion: apiextensions.k8s.io/v1
      kind: CustomResourceDefinition
      metadata:
        creationTimestamp: null
        name: datamodels.nexus.vmware.com
      spec:
        conversion:
          strategy: None
        group: nexus.vmware.com
        names:
          kind: Datamodel
          listKind: DatamodelList
          plural: datamodels
          shortNames:
          - datamodel
          singular: datamodel
        scope: Cluster
        versions:
        - name: v1
          schema:
            openAPIV3Schema:
              type: object
              properties:
                apiVersion:
                  type: string
                kind:
                  type: string
                metadata:
                  type: object
                spec:
                  properties:
                    name:
                      type: string
                    url:
                      type: string
                    title:
                      type: string
                      default: "Nexus API GW APIs"
                    enableGraphql:
                      type: boolean
                      default: false
                    graphqlPath:
                      type: string
                      default: ""
                  type: object
          served: true
          storage: true      
          ' | kubectl apply -f -
      if [[ $SKIP_CRD_INSTALLATION == "false" ]]; then
          kubectl apply -f /crds --recursive
      fi
      ### We will create datamodel object
      if [[ -n $NAME ]] && [[ -n $IMAGE ]]; then
        if [[ -n $TITLE ]]; then
          echo '
            apiVersion: nexus.vmware.com/v1
            kind: Datamodel
            metadata:
              name: '"$NAME"'
            spec:
              name: '"$NAME"'
              url: '"$IMAGE"'
              title: '"$TITLE"'
              enableGraphql: '"$GRAPHQL_ENABLED"'' | kubectl apply -f -
        else
          echo '
          apiVersion: nexus.vmware.com/v1
          kind: Datamodel
          metadata:
            name: '"$NAME"'
          spec:
            name: '"$NAME"'
            url: '"$IMAGE"'
            enableGraphql: '"$GRAPHQL_ENABLED"'' | kubectl apply -f -
        fi
      fi